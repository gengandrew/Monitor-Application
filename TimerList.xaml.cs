using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

using System.Windows.Threading;
using System.Collections.ObjectModel;
namespace TimeTracker
{
    /// <summary>
    /// Interaction logic for TimerList.xaml
    /// </summary>
    public partial class TimerList : Window
    {
        private ObservableCollection<TimerListElement> elements { get; set; }
        private InitBaseGrid baseGrid;
        private Cell[,] cells;
        private Grid[,] Icolbl;

        private DispatcherTimer disTimer;
        private TimeSpan secTick;

        public TimerList()
        {
            this.secTick = new TimeSpan(0, 0, 0, 1, 0);
            elements = new ObservableCollection<TimerListElement>();
            InitializeComponent();
            TimerGrid.ItemsSource = elements;
            InitBaseGrid.ActionTaken += ClickActionTaken;
            Watcher.ActionTaken += ClickActionTaken;
            if (Watcher.elements.Count != 0)
            {
                this.baseGrid = Watcher.elements[0] as InitBaseGrid;
                this.cells = this.baseGrid.getCells();
                this.Icolbl = this.baseGrid.getMaskingGrid();
                if (cells != null)
                {
                    UpdateDataList();
                    bubbleSort();
                    startTimer();
                    TimerGrid.Items.Refresh();
                }
            }
        }

        private void UpdateDataList()
        {
            for (int i = 0; i < cells.GetLength(0); i++)
            {
                for (int j = 0; j < cells.GetLength(1); j++)
                {
                    if (cells[i, j] != null && !Icolbl[i, j].Background.Equals(Brushes.Black))
                    {
                        TimerListElement output = new TimerListElement();
                        output.ovenName = cells[i, j].getOvenName();
                        output.recipeName = Server.getRecipeName(cells[i, j].getRecipeKey());
                        int[] placeHolder = cells[i, j].getProgressionID();
                        output.progressionID = Conversions.progressionIDToString(placeHolder);
                        output.locationID = cells[i, j].getRow().ToString() + (cells[i, j].getColumn() + 1).ToString();
                        output.StartTime = Server.getStartTime(cells[i, j].getOvenName(), cells[i, j].getRow(), cells[i, j].getColumn());
                        output.EndTime = output.StartTime.Add(cells[i, j].getLimits()[0]);
                        if (IsCellOn(cells[i, j]))
                        {
                            output.singleCounter = cells[i, j].getSingleCounter();
                            output.timer = cells[i, j].getSecTimerLimit();
                            output.limits = cells[i, j].getLimits();
                            if (output.timer != -1)
                            {
                                output.remSpan = Conversions.StripMiliSec(cells[i, j].getTimeSpan());
                            }
                            else
                            {
                                output.remSpan = new TimeSpan(0, 0, 0, 0);
                            }
                        }
                        else
                        {
                            output.timer = 0;
                            output.remSpan = new TimeSpan(0, 0, 0, 0);
                        }
                        elements.Add(output);
                    }
                }
            }
        }

        private void AutoGeneratedColumns(object sender, EventArgs e)
        {
            TimerGrid.Columns.RemoveAt(4);
            TimerGrid.Columns.RemoveAt(2);
            TimerGrid.Columns.RemoveAt(3);
            TimerGrid.Columns.RemoveAt(3);
            TimerGrid.Columns[0].Header = "Oven Name";
            TimerGrid.Columns[0].Width = 80;
            TimerGrid.Columns[1].Header = "Recipe Name";
            TimerGrid.Columns[1].Width = 90;
            //TimerGrid.Columns[2].Header = "ID";
            //TimerGrid.Columns[2].Width = 60;
            TimerGrid.Columns[2].Header = "Row/Col";
            TimerGrid.Columns[2].Width = 60;
            TimerGrid.Columns[3].Header = "Remaining";
            TimerGrid.Columns[3].Width = 75;
            //TimerGrid.Columns[3].Width = 222;
            TimerGrid.Columns[4].Header = "Start Time";
            TimerGrid.Columns[4].Width = 135;
            TimerGrid.Columns[5].Header = "Ready Time";
            TimerGrid.Columns[5].Width = 135;
        }

        private bool IsCellOn(Cell cell)
        {
            DateTime curr = DateTime.Now;
            DateTime startTime = Server.getStartTime(cell.getOvenName(), cell.getRow(), cell.getColumn());
            TimeSpan totalTimer = cell.getTotalTimer();
            TimeSpan currStime = curr.Subtract(startTime);
            TimeSpan timeTest = totalTimer.Subtract(currStime);
            double mili = timeTest.TotalSeconds;
            if (mili <= 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        private void bubbleSort()
        {
            int length = elements.Count;
            for (int i = 0; i < length; i++)
            {
                for (int j = 0; j < length - i - 1; j++)
                {
                    TimerListElement placeHolder1 = elements[j] as TimerListElement;
                    TimerListElement placeHolder2 = elements[j + 1] as TimerListElement;
                    if (placeHolder1.remSpan.CompareTo(placeHolder2.remSpan) > 0)
                    {
                        elements[j] = placeHolder2;
                        elements[j + 1] = placeHolder1;
                    }
                }
            }
        }

        private void ClickActionTaken(bool fromMainRemove)
        {
            if (fromMainRemove)
            {
                this.elements = new ObservableCollection<TimerListElement>();
                TimerGrid.ItemsSource = elements;
                TimerGrid.Items.Refresh();
            }
            else
            {
                this.elements = new ObservableCollection<TimerListElement>();
                TimerGrid.ItemsSource = elements;
                this.baseGrid = Watcher.elements[0] as InitBaseGrid;
                this.cells = this.baseGrid.getCells();
                this.Icolbl = this.baseGrid.getMaskingGrid();
                if (cells != null)
                {
                    UpdateDataList();
                    bubbleSort();
                    startTimer();
                    TimerGrid.Items.Refresh();
                }
            }
        }

        private void startTimer()
        {
            if (disTimer == null)
            {
                disTimer = new DispatcherTimer();
                disTimer.Interval = secTick;   //current timer increments in 1 seconds
                disTimer.Tick += DisTimer_Tick;
                disTimer.Start();
            }
            else
            {
                disTimer.Stop();
                disTimer = new DispatcherTimer();
                disTimer.Interval = secTick;   //current timer increments in 1 seconds
                disTimer.Tick += DisTimer_Tick;
                disTimer.Start();
            }
        }

        private void DisTimer_Tick(object sender, EventArgs e)
        {
            int counter = 0;
            for (int i = 0; i < elements.Count; i++)
            {
                if (elements[i].timer > 0)
                {
                    elements[i].timer = elements[i].timer - 1;
                    elements[i].remSpan = elements[i].remSpan.Subtract(secTick);
                    if (elements[i].remSpan.Equals(new TimeSpan(0, 0, 0, 0)) && !elements[i].singleCounter[0])
                    {
                        elements[i].remSpan = elements[i].limits[1];
                        elements[i].singleCounter[0] = true;
                    }
                    else if (elements[i].remSpan.Equals(new TimeSpan(0, 0, 0, 0)) && !elements[i].singleCounter[1])
                    {
                        elements[i].remSpan = elements[i].limits[2];
                        elements[i].singleCounter[1] = true;
                    }
                }
                else
                {
                    counter++;
                }
            }
            bubbleSort();
            TimerGrid.Items.Refresh();
            if (counter == elements.Count && counter != 0)
            {
                disTimer.Stop();
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (disTimer != null)
            {
                disTimer.Stop();
            }
        }
    }

    public class TimerListElement
    {
        public string ovenName { get; set; }
        public string recipeName { get; set; }
        public string progressionID { get; set; }
        public string locationID { get; set; }
        public int timer { get; set; }
        public TimeSpan[] limits { get; set; }
        public bool[] singleCounter { get; set; }
        public TimeSpan remSpan { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
    }
}
